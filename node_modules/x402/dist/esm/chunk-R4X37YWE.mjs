import {
  createAndSignPayment,
  createPayment,
  createPaymentHeader,
  createPaymentHeader2,
  decodePayment,
  encodePayment,
  preparePaymentHeader,
  signPaymentHeader
} from "./chunk-USXZ7G35.mjs";
import {
  ErrorReasons,
  SupportedSVMNetworks,
  authorizationTypes,
  decodeTransactionFromPayload,
  getNetworkId,
  getRpcClient,
  getRpcSubscriptions,
  signAndSimulateTransaction
} from "./chunk-RPNGUTDD.mjs";
import {
  __export,
  config,
  getERC20Balance,
  getVersion,
  usdcABI
} from "./chunk-N73NYY2B.mjs";

// src/schemes/exact/index.ts
var exact_exports = {};
__export(exact_exports, {
  SCHEME: () => SCHEME,
  evm: () => evm_exports,
  svm: () => svm_exports
});

// src/schemes/exact/evm/index.ts
var evm_exports = {};
__export(evm_exports, {
  createPayment: () => createPayment,
  createPaymentHeader: () => createPaymentHeader,
  decodePayment: () => decodePayment,
  encodePayment: () => encodePayment,
  preparePaymentHeader: () => preparePaymentHeader,
  settle: () => settle,
  signPaymentHeader: () => signPaymentHeader,
  verify: () => verify
});

// src/schemes/exact/evm/facilitator.ts
import { getAddress, parseErc6492Signature } from "viem";
async function verify(client, payload, paymentRequirements) {
  const exactEvmPayload = payload.payload;
  if (payload.scheme !== SCHEME || paymentRequirements.scheme !== SCHEME) {
    return {
      isValid: false,
      invalidReason: `unsupported_scheme`,
      payer: exactEvmPayload.authorization.from
    };
  }
  let name;
  let chainId;
  let erc20Address;
  let version;
  try {
    chainId = getNetworkId(payload.network);
    name = paymentRequirements.extra?.name ?? config[chainId.toString()].usdcName;
    erc20Address = paymentRequirements.asset;
    version = paymentRequirements.extra?.version ?? await getVersion(client);
  } catch {
    return {
      isValid: false,
      invalidReason: `invalid_network`,
      payer: payload.payload.authorization.from
    };
  }
  const permitTypedData = {
    types: authorizationTypes,
    primaryType: "TransferWithAuthorization",
    domain: {
      name,
      version,
      chainId,
      verifyingContract: erc20Address
    },
    message: {
      from: exactEvmPayload.authorization.from,
      to: exactEvmPayload.authorization.to,
      value: exactEvmPayload.authorization.value,
      validAfter: exactEvmPayload.authorization.validAfter,
      validBefore: exactEvmPayload.authorization.validBefore,
      nonce: exactEvmPayload.authorization.nonce
    }
  };
  const recoveredAddress = await client.verifyTypedData({
    address: exactEvmPayload.authorization.from,
    ...permitTypedData,
    signature: exactEvmPayload.signature
  });
  if (!recoveredAddress) {
    return {
      isValid: false,
      invalidReason: "invalid_exact_evm_payload_signature",
      //"Invalid permit signature",
      payer: exactEvmPayload.authorization.from
    };
  }
  if (getAddress(exactEvmPayload.authorization.to) !== getAddress(paymentRequirements.payTo)) {
    return {
      isValid: false,
      invalidReason: "invalid_exact_evm_payload_recipient_mismatch",
      payer: exactEvmPayload.authorization.from
    };
  }
  if (BigInt(exactEvmPayload.authorization.validBefore) < BigInt(Math.floor(Date.now() / 1e3) + 6)) {
    return {
      isValid: false,
      invalidReason: "invalid_exact_evm_payload_authorization_valid_before",
      //"Deadline on permit isn't far enough in the future",
      payer: exactEvmPayload.authorization.from
    };
  }
  if (BigInt(exactEvmPayload.authorization.validAfter) > BigInt(Math.floor(Date.now() / 1e3))) {
    return {
      isValid: false,
      invalidReason: "invalid_exact_evm_payload_authorization_valid_after",
      //"Deadline on permit is in the future",
      payer: exactEvmPayload.authorization.from
    };
  }
  const balance = await getERC20Balance(
    client,
    erc20Address,
    exactEvmPayload.authorization.from
  );
  if (balance < BigInt(paymentRequirements.maxAmountRequired)) {
    return {
      isValid: false,
      invalidReason: "insufficient_funds",
      //"Client does not have enough funds",
      payer: exactEvmPayload.authorization.from
    };
  }
  if (BigInt(exactEvmPayload.authorization.value) < BigInt(paymentRequirements.maxAmountRequired)) {
    return {
      isValid: false,
      invalidReason: "invalid_exact_evm_payload_authorization_value",
      //"Value in payload is not enough to cover paymentRequirements.maxAmountRequired",
      payer: exactEvmPayload.authorization.from
    };
  }
  return {
    isValid: true,
    invalidReason: void 0,
    payer: exactEvmPayload.authorization.from
  };
}
async function settle(wallet, paymentPayload, paymentRequirements) {
  const payload = paymentPayload.payload;
  const valid = await verify(wallet, paymentPayload, paymentRequirements);
  if (!valid.isValid) {
    return {
      success: false,
      network: paymentPayload.network,
      transaction: "",
      errorReason: valid.invalidReason ?? "invalid_scheme",
      //`Payment is no longer valid: ${valid.invalidReason}`,
      payer: payload.authorization.from
    };
  }
  const { signature } = parseErc6492Signature(payload.signature);
  const tx = await wallet.writeContract({
    address: paymentRequirements.asset,
    abi: usdcABI,
    functionName: "transferWithAuthorization",
    args: [
      payload.authorization.from,
      payload.authorization.to,
      BigInt(payload.authorization.value),
      BigInt(payload.authorization.validAfter),
      BigInt(payload.authorization.validBefore),
      payload.authorization.nonce,
      signature
    ],
    chain: wallet.chain
  });
  const receipt = await wallet.waitForTransactionReceipt({ hash: tx });
  if (receipt.status !== "success") {
    return {
      success: false,
      errorReason: "invalid_transaction_state",
      //`Transaction failed`,
      transaction: tx,
      network: paymentPayload.network,
      payer: payload.authorization.from
    };
  }
  return {
    success: true,
    transaction: tx,
    network: paymentPayload.network,
    payer: payload.authorization.from
  };
}

// src/schemes/exact/svm/index.ts
var svm_exports = {};
__export(svm_exports, {
  confirmSignedTransaction: () => confirmSignedTransaction,
  createAndSignPayment: () => createAndSignPayment,
  createPaymentHeader: () => createPaymentHeader2,
  getValidatedTransferCheckedInstruction: () => getValidatedTransferCheckedInstruction,
  sendAndConfirmSignedTransaction: () => sendAndConfirmSignedTransaction,
  sendSignedTransaction: () => sendSignedTransaction,
  settle: () => settle2,
  transactionIntrospection: () => transactionIntrospection,
  verify: () => verify2,
  verifyComputeLimitInstruction: () => verifyComputeLimitInstruction,
  verifyComputePriceInstruction: () => verifyComputePriceInstruction,
  verifyCreateATAInstruction: () => verifyCreateATAInstruction,
  verifySchemesAndNetworks: () => verifySchemesAndNetworks,
  verifyTransactionInstructions: () => verifyTransactionInstructions,
  verifyTransferCheckedInstruction: () => verifyTransferCheckedInstruction,
  verifyTransferInstruction: () => verifyTransferInstruction
});

// src/schemes/exact/svm/facilitator/settle.ts
import {
  assertIsTransactionMessageWithBlockhashLifetime,
  decompileTransactionMessageFetchingLookupTables as decompileTransactionMessageFetchingLookupTables2,
  getBase64EncodedWireTransaction,
  getCompiledTransactionMessageDecoder as getCompiledTransactionMessageDecoder2,
  getSignatureFromTransaction,
  isSolanaError,
  signTransaction,
  SOLANA_ERROR__BLOCK_HEIGHT_EXCEEDED
} from "@solana/kit";
import {
  createBlockHeightExceedencePromiseFactory,
  waitForRecentTransactionConfirmation,
  createRecentSignatureConfirmationPromiseFactory
} from "@solana/transaction-confirmation";

// src/schemes/exact/svm/facilitator/verify.ts
import {
  assertIsInstructionWithAccounts,
  assertIsInstructionWithData,
  decompileTransactionMessageFetchingLookupTables,
  fetchEncodedAccounts,
  getCompiledTransactionMessageDecoder
} from "@solana/kit";
import {
  parseSetComputeUnitLimitInstruction,
  parseSetComputeUnitPriceInstruction,
  COMPUTE_BUDGET_PROGRAM_ADDRESS
} from "@solana-program/compute-budget";
import {
  findAssociatedTokenPda,
  identifyToken2022Instruction,
  parseCreateAssociatedTokenInstruction,
  parseTransferCheckedInstruction as parseTransferCheckedInstruction2022,
  Token2022Instruction,
  TOKEN_2022_PROGRAM_ADDRESS
} from "@solana-program/token-2022";
import {
  identifyTokenInstruction,
  parseTransferCheckedInstruction as parseTransferCheckedInstructionToken,
  TOKEN_PROGRAM_ADDRESS,
  TokenInstruction
} from "@solana-program/token";
async function verify2(signer, payload, paymentRequirements, config2) {
  try {
    verifySchemesAndNetworks(payload, paymentRequirements);
    const svmPayload = payload.payload;
    const decodedTransaction = decodeTransactionFromPayload(svmPayload);
    const rpc = getRpcClient(paymentRequirements.network, config2?.svmConfig?.rpcUrl);
    await transactionIntrospection(svmPayload, paymentRequirements, config2);
    const simulateResult = await signAndSimulateTransaction(signer, decodedTransaction, rpc);
    if (simulateResult.value?.err) {
      throw new Error(`invalid_exact_svm_payload_transaction_simulation_failed`);
    }
    return {
      isValid: true,
      invalidReason: void 0
    };
  } catch (error) {
    if (error instanceof Error) {
      if (ErrorReasons.includes(error.message)) {
        return {
          isValid: false,
          invalidReason: error.message
        };
      }
    }
    console.error(error);
    return {
      isValid: false,
      invalidReason: "unexpected_verify_error"
    };
  }
}
function verifySchemesAndNetworks(payload, paymentRequirements) {
  if (payload.scheme !== SCHEME || paymentRequirements.scheme !== SCHEME) {
    throw new Error("unsupported_scheme");
  }
  if (payload.network !== paymentRequirements.network || !SupportedSVMNetworks.includes(paymentRequirements.network)) {
    throw new Error("invalid_network");
  }
}
async function transactionIntrospection(svmPayload, paymentRequirements, config2) {
  const rpc = getRpcClient(paymentRequirements.network, config2?.svmConfig?.rpcUrl);
  const decodedTransaction = decodeTransactionFromPayload(svmPayload);
  const compiledTransactionMessage = getCompiledTransactionMessageDecoder().decode(
    decodedTransaction.messageBytes
  );
  const transactionMessage = await decompileTransactionMessageFetchingLookupTables(
    compiledTransactionMessage,
    rpc
  );
  await verifyTransactionInstructions(transactionMessage, paymentRequirements, rpc);
}
async function verifyTransactionInstructions(transactionMessage, paymentRequirements, rpc) {
  if (transactionMessage.instructions.length !== 3 && transactionMessage.instructions.length !== 4) {
    throw new Error(`invalid_exact_svm_payload_transaction_instructions_length`);
  }
  verifyComputeLimitInstruction(transactionMessage.instructions[0]);
  verifyComputePriceInstruction(transactionMessage.instructions[1]);
  if (transactionMessage.instructions.length === 3) {
    await verifyTransferInstruction(
      transactionMessage.instructions[2],
      paymentRequirements,
      {
        txHasCreateDestATAInstruction: false
      },
      rpc
    );
  } else {
    verifyCreateATAInstruction(transactionMessage.instructions[2], paymentRequirements);
    await verifyTransferInstruction(
      transactionMessage.instructions[3],
      paymentRequirements,
      {
        txHasCreateDestATAInstruction: true
      },
      rpc
    );
  }
}
function verifyComputeLimitInstruction(instruction) {
  try {
    if (instruction.programAddress.toString() !== COMPUTE_BUDGET_PROGRAM_ADDRESS.toString() || instruction.data?.[0] !== 2) {
      throw new Error(
        `invalid_exact_svm_payload_transaction_instructions_compute_limit_instruction`
      );
    }
    parseSetComputeUnitLimitInstruction(
      instruction
    );
  } catch (error) {
    console.error(error);
    throw new Error(`invalid_exact_svm_payload_transaction_instructions_compute_limit_instruction`);
  }
}
function verifyComputePriceInstruction(instruction) {
  if (instruction.programAddress.toString() !== COMPUTE_BUDGET_PROGRAM_ADDRESS.toString() || instruction.data?.[0] !== 3) {
    throw new Error(`invalid_exact_svm_payload_transaction_instructions_compute_price_instruction`);
  }
  const parsedInstruction = parseSetComputeUnitPriceInstruction(
    instruction
  );
  if (parsedInstruction.data.microLamports > 5 * 1e6) {
    throw new Error(
      `invalid_exact_svm_payload_transaction_instructions_compute_price_instruction_too_high`
    );
  }
}
function verifyCreateATAInstruction(instruction, paymentRequirements) {
  let createATAInstruction;
  try {
    assertIsInstructionWithAccounts(instruction);
    assertIsInstructionWithData(instruction);
    createATAInstruction = parseCreateAssociatedTokenInstruction({
      ...instruction,
      data: new Uint8Array(instruction.data)
    });
  } catch (error) {
    console.error(error);
    throw new Error(`invalid_exact_svm_payload_transaction_create_ata_instruction`);
  }
  if (createATAInstruction.accounts.owner.address !== paymentRequirements.payTo) {
    throw new Error(`invalid_exact_svm_payload_transaction_create_ata_instruction_incorrect_payee`);
  }
  if (createATAInstruction.accounts.mint.address !== paymentRequirements.asset) {
    throw new Error(`invalid_exact_svm_payload_transaction_create_ata_instruction_incorrect_asset`);
  }
}
async function verifyTransferInstruction(instruction, paymentRequirements, { txHasCreateDestATAInstruction }, rpc) {
  const tokenInstruction = getValidatedTransferCheckedInstruction(instruction);
  await verifyTransferCheckedInstruction(
    tokenInstruction,
    paymentRequirements,
    {
      txHasCreateDestATAInstruction
    },
    rpc
  );
}
async function verifyTransferCheckedInstruction(parsedInstruction, paymentRequirements, { txHasCreateDestATAInstruction }, rpc) {
  const tokenProgramAddress = parsedInstruction.programAddress.toString() === TOKEN_PROGRAM_ADDRESS.toString() ? TOKEN_PROGRAM_ADDRESS : TOKEN_2022_PROGRAM_ADDRESS;
  const payToATA = await findAssociatedTokenPda({
    mint: paymentRequirements.asset,
    owner: paymentRequirements.payTo,
    tokenProgram: tokenProgramAddress
  });
  if (parsedInstruction.accounts.destination.address !== payToATA[0]) {
    throw new Error(`invalid_exact_svm_payload_transaction_transfer_to_incorrect_ata`);
  }
  const addresses = [parsedInstruction.accounts.source.address, payToATA[0]];
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses);
  const missingAccounts = maybeAccounts.filter((a) => !a.exists);
  for (const missingAccount of missingAccounts) {
    if (missingAccount.address === parsedInstruction.accounts.source.address) {
      throw new Error(`invalid_exact_svm_payload_transaction_sender_ata_not_found`);
    }
    if (missingAccount.address === payToATA[0] && !txHasCreateDestATAInstruction) {
      throw new Error(`invalid_exact_svm_payload_transaction_receiver_ata_not_found`);
    }
  }
  const instructionAmount = parsedInstruction.data.amount;
  const paymentRequirementsAmount = BigInt(paymentRequirements.maxAmountRequired);
  if (instructionAmount !== paymentRequirementsAmount) {
    throw new Error(`invalid_exact_svm_payload_transaction_amount_mismatch`);
  }
}
function getValidatedTransferCheckedInstruction(instruction) {
  try {
    assertIsInstructionWithData(instruction);
    assertIsInstructionWithAccounts(instruction);
  } catch (error) {
    console.error(error);
    throw new Error(`invalid_exact_svm_payload_transaction_instructions`);
  }
  let tokenInstruction;
  if (instruction.programAddress.toString() === TOKEN_PROGRAM_ADDRESS.toString()) {
    const identifiedInstruction = identifyTokenInstruction(instruction);
    if (identifiedInstruction !== TokenInstruction.TransferChecked) {
      throw new Error(
        `invalid_exact_svm_payload_transaction_instruction_not_spl_token_transfer_checked`
      );
    }
    tokenInstruction = parseTransferCheckedInstructionToken({
      ...instruction,
      data: new Uint8Array(instruction.data)
    });
  } else if (instruction.programAddress.toString() === TOKEN_2022_PROGRAM_ADDRESS.toString()) {
    const identifiedInstruction = identifyToken2022Instruction(instruction);
    if (identifiedInstruction !== Token2022Instruction.TransferChecked) {
      throw new Error(
        `invalid_exact_svm_payload_transaction_instruction_not_token_2022_transfer_checked`
      );
    }
    tokenInstruction = parseTransferCheckedInstruction2022({
      ...instruction,
      data: new Uint8Array(instruction.data)
    });
  } else {
    throw new Error(`invalid_exact_svm_payload_transaction_not_a_transfer_instruction`);
  }
  return tokenInstruction;
}

// src/schemes/exact/svm/facilitator/settle.ts
async function settle2(signer, payload, paymentRequirements, config2) {
  const verifyResponse = await verify2(signer, payload, paymentRequirements, config2);
  if (!verifyResponse.isValid) {
    return {
      success: false,
      errorReason: verifyResponse.invalidReason,
      network: payload.network,
      transaction: ""
    };
  }
  const svmPayload = payload.payload;
  const decodedTransaction = decodeTransactionFromPayload(svmPayload);
  const signedTransaction = await signTransaction([signer.keyPair], decodedTransaction);
  const payer = signer.address.toString();
  const rpc = getRpcClient(paymentRequirements.network, config2?.svmConfig?.rpcUrl);
  const rpcSubscriptions = getRpcSubscriptions(
    paymentRequirements.network,
    config2?.svmConfig?.rpcUrl
  );
  try {
    const { success, errorReason, signature } = await sendAndConfirmSignedTransaction(
      signedTransaction,
      rpc,
      rpcSubscriptions
    );
    return {
      success,
      errorReason,
      payer,
      transaction: signature,
      network: payload.network
    };
  } catch (error) {
    console.error("Unexpected error during transaction settlement:", error);
    return {
      success: false,
      errorReason: "unexpected_settle_error",
      network: payload.network,
      transaction: getSignatureFromTransaction(signedTransaction)
    };
  }
}
async function sendSignedTransaction(signedTransaction, rpc, sendTxConfig = {
  skipPreflight: true,
  encoding: "base64"
}) {
  const base64EncodedTransaction = getBase64EncodedWireTransaction(signedTransaction);
  return await rpc.sendTransaction(base64EncodedTransaction, sendTxConfig).send();
}
async function confirmSignedTransaction(signedTransaction, rpc, rpcSubscriptions) {
  const signature = getSignatureFromTransaction(signedTransaction);
  const abortController = new AbortController();
  const timeout = setTimeout(() => {
    abortController.abort("Transaction confirmation timed out after 60 seconds");
  }, 6e4);
  try {
    const compiledTransactionMessage = getCompiledTransactionMessageDecoder2().decode(
      signedTransaction.messageBytes
    );
    const decompiledTransactionMessage = await decompileTransactionMessageFetchingLookupTables2(
      compiledTransactionMessage,
      rpc
    );
    assertIsTransactionMessageWithBlockhashLifetime(decompiledTransactionMessage);
    const signedTransactionWithBlockhashLifetime = {
      ...signedTransaction,
      lifetimeConstraint: decompiledTransactionMessage.lifetimeConstraint
    };
    const commitment = "confirmed";
    const getRecentSignatureConfirmationPromise = createRecentSignatureConfirmationPromiseFactory({
      rpc,
      rpcSubscriptions
    });
    const getBlockHeightExceedencePromise = createBlockHeightExceedencePromiseFactory({
      rpc,
      rpcSubscriptions
    });
    const config2 = {
      abortSignal: abortController.signal,
      commitment,
      getBlockHeightExceedencePromise,
      getRecentSignatureConfirmationPromise
    };
    await waitForRecentTransactionConfirmation({
      ...config2,
      transaction: signedTransactionWithBlockhashLifetime
    });
    return {
      success: true,
      signature
    };
  } catch (error) {
    console.error(error);
    if (isSolanaError(error, SOLANA_ERROR__BLOCK_HEIGHT_EXCEEDED)) {
      return {
        success: false,
        errorReason: "settle_exact_svm_block_height_exceeded",
        signature
      };
    } else if (error instanceof DOMException && error.name === "AbortError") {
      return {
        success: false,
        errorReason: "settle_exact_svm_transaction_confirmation_timed_out",
        signature
      };
    } else {
      throw error;
    }
  } finally {
    clearTimeout(timeout);
  }
}
async function sendAndConfirmSignedTransaction(signedTransaction, rpc, rpcSubscriptions) {
  await sendSignedTransaction(signedTransaction, rpc);
  return await confirmSignedTransaction(signedTransaction, rpc, rpcSubscriptions);
}

// src/schemes/exact/index.ts
var SCHEME = "exact";

export {
  verify2 as verify,
  settle2 as settle,
  exact_exports,
  verify as verify2,
  settle as settle2
};
//# sourceMappingURL=chunk-R4X37YWE.mjs.map