{"version":3,"sources":["../../src/index.ts"],"sourcesContent":["import { generateJwt } from \"@coinbase/cdp-sdk/auth\";\nimport { FacilitatorConfig } from \"x402/types\";\nimport { CreateHeaders } from \"x402/verify\";\n\nconst COINBASE_FACILITATOR_BASE_URL = \"https://api.cdp.coinbase.com\";\nconst COINBASE_FACILITATOR_V2_ROUTE = \"/platform/v2/x402\";\n\nconst X402_SDK_VERSION = \"0.6.6\";\nconst CDP_SDK_VERSION = \"1.29.0\";\n\n/**\n * Creates an authorization header for a request to the Coinbase API.\n *\n * @param apiKeyId - The api key ID\n * @param apiKeySecret - The api key secret\n * @param requestMethod - The method for the request (e.g. 'POST')\n * @param requestHost - The host for the request (e.g. 'https://x402.org/facilitator')\n * @param requestPath - The path for the request (e.g. '/verify')\n * @returns The authorization header string\n */\nexport async function createAuthHeader(\n  apiKeyId: string,\n  apiKeySecret: string,\n  requestMethod: string,\n  requestHost: string,\n  requestPath: string,\n) {\n  const jwt = await generateJwt({\n    apiKeyId,\n    apiKeySecret,\n    requestMethod,\n    requestHost,\n    requestPath,\n  });\n  return `Bearer ${jwt}`;\n}\n\n/**\n * Creates a correlation header for a request to the Coinbase API.\n *\n * @returns The correlation header string\n */\nexport function createCorrelationHeader(): string {\n  const data: Record<string, string> = {\n    sdk_version: CDP_SDK_VERSION,\n    sdk_language: \"typescript\",\n    source: \"x402\",\n    source_version: X402_SDK_VERSION,\n  };\n  return Object.keys(data)\n    .map(key => `${key}=${encodeURIComponent(data[key])}`)\n    .join(\",\");\n}\n\n/**\n * Creates a CDP auth header for the facilitator service\n *\n * @param apiKeyId - The CDP API key ID\n * @param apiKeySecret - The CDP API key secret\n * @returns A function that returns the auth headers\n */\nexport function createCdpAuthHeaders(apiKeyId?: string, apiKeySecret?: string): CreateHeaders {\n  const requestHost = COINBASE_FACILITATOR_BASE_URL.replace(\"https://\", \"\");\n\n  return async () => {\n    apiKeyId = apiKeyId ?? process.env.CDP_API_KEY_ID;\n    apiKeySecret = apiKeySecret ?? process.env.CDP_API_KEY_SECRET;\n\n    const headers = {\n      verify: {\n        \"Correlation-Context\": createCorrelationHeader(),\n      } as Record<string, string>,\n      settle: {\n        \"Correlation-Context\": createCorrelationHeader(),\n      } as Record<string, string>,\n      supported: {\n        \"Correlation-Context\": createCorrelationHeader(),\n      } as Record<string, string>,\n      list: {\n        \"Correlation-Context\": createCorrelationHeader(),\n      },\n    };\n\n    if (apiKeyId && apiKeySecret) {\n      headers.verify.Authorization = await createAuthHeader(\n        apiKeyId,\n        apiKeySecret,\n        \"POST\",\n        requestHost,\n        `${COINBASE_FACILITATOR_V2_ROUTE}/verify`,\n      );\n      headers.settle.Authorization = await createAuthHeader(\n        apiKeyId,\n        apiKeySecret,\n        \"POST\",\n        requestHost,\n        `${COINBASE_FACILITATOR_V2_ROUTE}/settle`,\n      );\n      headers.supported.Authorization = await createAuthHeader(\n        apiKeyId,\n        apiKeySecret,\n        \"GET\",\n        requestHost,\n        `${COINBASE_FACILITATOR_V2_ROUTE}/supported`,\n      );\n    }\n\n    return headers;\n  };\n}\n\n/**\n * Creates a facilitator config for the Coinbase X402 facilitator\n *\n * @param apiKeyId - The CDP API key ID\n * @param apiKeySecret - The CDP API key secret\n * @returns A facilitator config\n */\nexport function createFacilitatorConfig(\n  apiKeyId?: string,\n  apiKeySecret?: string,\n): FacilitatorConfig {\n  return {\n    url: `${COINBASE_FACILITATOR_BASE_URL}${COINBASE_FACILITATOR_V2_ROUTE}`,\n    createAuthHeaders: createCdpAuthHeaders(apiKeyId, apiKeySecret),\n  };\n}\n\nexport const facilitator = createFacilitatorConfig();\n"],"mappings":";AAAA,SAAS,mBAAmB;AAI5B,IAAM,gCAAgC;AACtC,IAAM,gCAAgC;AAEtC,IAAM,mBAAmB;AACzB,IAAM,kBAAkB;AAYxB,eAAsB,iBACpB,UACA,cACA,eACA,aACA,aACA;AACA,QAAM,MAAM,MAAM,YAAY;AAAA,IAC5B;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF,CAAC;AACD,SAAO,UAAU,GAAG;AACtB;AAOO,SAAS,0BAAkC;AAChD,QAAM,OAA+B;AAAA,IACnC,aAAa;AAAA,IACb,cAAc;AAAA,IACd,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AACA,SAAO,OAAO,KAAK,IAAI,EACpB,IAAI,SAAO,GAAG,GAAG,IAAI,mBAAmB,KAAK,GAAG,CAAC,CAAC,EAAE,EACpD,KAAK,GAAG;AACb;AASO,SAAS,qBAAqB,UAAmB,cAAsC;AAC5F,QAAM,cAAc,8BAA8B,QAAQ,YAAY,EAAE;AAExE,SAAO,YAAY;AACjB,eAAW,YAAY,QAAQ,IAAI;AACnC,mBAAe,gBAAgB,QAAQ,IAAI;AAE3C,UAAM,UAAU;AAAA,MACd,QAAQ;AAAA,QACN,uBAAuB,wBAAwB;AAAA,MACjD;AAAA,MACA,QAAQ;AAAA,QACN,uBAAuB,wBAAwB;AAAA,MACjD;AAAA,MACA,WAAW;AAAA,QACT,uBAAuB,wBAAwB;AAAA,MACjD;AAAA,MACA,MAAM;AAAA,QACJ,uBAAuB,wBAAwB;AAAA,MACjD;AAAA,IACF;AAEA,QAAI,YAAY,cAAc;AAC5B,cAAQ,OAAO,gBAAgB,MAAM;AAAA,QACnC;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA,GAAG,6BAA6B;AAAA,MAClC;AACA,cAAQ,OAAO,gBAAgB,MAAM;AAAA,QACnC;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA,GAAG,6BAA6B;AAAA,MAClC;AACA,cAAQ,UAAU,gBAAgB,MAAM;AAAA,QACtC;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA,GAAG,6BAA6B;AAAA,MAClC;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AACF;AASO,SAAS,wBACd,UACA,cACmB;AACnB,SAAO;AAAA,IACL,KAAK,GAAG,6BAA6B,GAAG,6BAA6B;AAAA,IACrE,mBAAmB,qBAAqB,UAAU,YAAY;AAAA,EAChE;AACF;AAEO,IAAM,cAAc,wBAAwB;","names":[]}