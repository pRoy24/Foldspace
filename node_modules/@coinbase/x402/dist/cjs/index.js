"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  createAuthHeader: () => createAuthHeader,
  createCdpAuthHeaders: () => createCdpAuthHeaders,
  createCorrelationHeader: () => createCorrelationHeader,
  createFacilitatorConfig: () => createFacilitatorConfig,
  facilitator: () => facilitator
});
module.exports = __toCommonJS(src_exports);
var import_auth = require("@coinbase/cdp-sdk/auth");
var COINBASE_FACILITATOR_BASE_URL = "https://api.cdp.coinbase.com";
var COINBASE_FACILITATOR_V2_ROUTE = "/platform/v2/x402";
var X402_SDK_VERSION = "0.6.6";
var CDP_SDK_VERSION = "1.29.0";
async function createAuthHeader(apiKeyId, apiKeySecret, requestMethod, requestHost, requestPath) {
  const jwt = await (0, import_auth.generateJwt)({
    apiKeyId,
    apiKeySecret,
    requestMethod,
    requestHost,
    requestPath
  });
  return `Bearer ${jwt}`;
}
function createCorrelationHeader() {
  const data = {
    sdk_version: CDP_SDK_VERSION,
    sdk_language: "typescript",
    source: "x402",
    source_version: X402_SDK_VERSION
  };
  return Object.keys(data).map((key) => `${key}=${encodeURIComponent(data[key])}`).join(",");
}
function createCdpAuthHeaders(apiKeyId, apiKeySecret) {
  const requestHost = COINBASE_FACILITATOR_BASE_URL.replace("https://", "");
  return async () => {
    apiKeyId = apiKeyId ?? process.env.CDP_API_KEY_ID;
    apiKeySecret = apiKeySecret ?? process.env.CDP_API_KEY_SECRET;
    const headers = {
      verify: {
        "Correlation-Context": createCorrelationHeader()
      },
      settle: {
        "Correlation-Context": createCorrelationHeader()
      },
      supported: {
        "Correlation-Context": createCorrelationHeader()
      },
      list: {
        "Correlation-Context": createCorrelationHeader()
      }
    };
    if (apiKeyId && apiKeySecret) {
      headers.verify.Authorization = await createAuthHeader(
        apiKeyId,
        apiKeySecret,
        "POST",
        requestHost,
        `${COINBASE_FACILITATOR_V2_ROUTE}/verify`
      );
      headers.settle.Authorization = await createAuthHeader(
        apiKeyId,
        apiKeySecret,
        "POST",
        requestHost,
        `${COINBASE_FACILITATOR_V2_ROUTE}/settle`
      );
      headers.supported.Authorization = await createAuthHeader(
        apiKeyId,
        apiKeySecret,
        "GET",
        requestHost,
        `${COINBASE_FACILITATOR_V2_ROUTE}/supported`
      );
    }
    return headers;
  };
}
function createFacilitatorConfig(apiKeyId, apiKeySecret) {
  return {
    url: `${COINBASE_FACILITATOR_BASE_URL}${COINBASE_FACILITATOR_V2_ROUTE}`,
    createAuthHeaders: createCdpAuthHeaders(apiKeyId, apiKeySecret)
  };
}
var facilitator = createFacilitatorConfig();
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  createAuthHeader,
  createCdpAuthHeaders,
  createCorrelationHeader,
  createFacilitatorConfig,
  facilitator
});
//# sourceMappingURL=index.js.map